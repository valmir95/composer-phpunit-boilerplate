<?php

namespace Adder;

use PHPUnit\Framework\TestCase;

class AdderTest extends TestCase
{

    public function setUp(){
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /*
     * Tests simple add
     */
    public function testAdd(){
        $adder = new Adder();
        $this->assertEquals(5, $adder->add(2, 3));
    }

    /*
     * Stubbing a method call to return a fixed value
     */
    public function testMockTest(){
        $mockTest = $this->createMock(Adder::class);

        //The method mockTest should in reality return 150, but we force it to return 500 by stubbing it.
        $mockTest->method('mockTest')
            ->willReturn(500);

        $this->assertEquals(500, $mockTest->mockTest());
    }

    /**
     * Here we create a mock-object based on the ORM class
     * We then force it to return the $expectedReturn array
     */
    public function testMockOrm(){
        $ormMock = $this->createMock(ORM::class);
        $expectedReturn = [1,2,3,4,5];

        $ormMock->method("getAllUserIds")
            ->willReturn($expectedReturn);

        $this->assertEquals($expectedReturn, $ormMock->getAllUserIds());
    }

    /**
     * Test that the method returns what it should return
     */
    public function testTask1(){

    }

    /**
     * Test that exception gets thrown. Hint: check the API.
     */
    public function testTask1Exception(){

    }



    /**
     * Mock/stub getAllUserIds and force it to return the array [1,2,3,4,5]
     * The first parameter of the task1 method is an integer that is added to use userId. Let that be 6.
     * assertEquals the result to make sure the result of task1 equals [1,2,3,4,5,6]
     */
    public function testTask2(){

    }

}
